Based on the information from the sources, here is a step-by-step guide to implementing a complete CI/CD process on AWS using the services and documents mentioned:

The demonstration covers building a Continuous Integration (CI) and Continuous Delivery (CD) pipeline on AWS using managed services like AWS CodePipeline, AWS CodeBuild, and AWS CodeDeploy, integrating with GitHub as the source repository. AWS CodePipeline acts as an orchestrator for the entire process.

**1. Continuous Integration (CI) Setup (Based on Day 14)**

The CI part focuses on taking the source code, building the application, creating a Docker image, and pushing it to a registry (Docker Hub in the demo).

*   **Prepare Source Code:**
    *   A simple Python Flask application (`app.py`).
    *   A `requirements.txt` file listing application dependencies (e.g., `flask`).
    *   A `Dockerfile` to build a Docker image of the application. This includes using a Python-based image, setting up a workspace, copying requirements, installing dependencies, 
        copying the source code, exposing the required port (e.g., 5000), and specifying the command to start the application.
*   **Set up Source Repository:**
    *   Create a GitHub repository containing the source code files (`app.py`, `requirements.txt`, `Dockerfile`). The demo uses a repository named `AWS-devops-Zero-to-Hero`.
*   **Configure AWS CodeBuild:** CodeBuild is used as the build service.
    *   **Create Build Project:** Navigate to AWS CodeBuild and create a new build project, providing a name (e.g., `sample-python-project`) and description.
    *   **Source Provider:** Select **GitHub** as the source provider. Connect to GitHub using OAuth, which involves selecting your GitHub account and confirming the connection. Specify 
          the repository name and the branch (e.g., `main`).
    *   **Environment:** Configure the build environment. Select a managed image, choose the operating system (e.g., **Ubuntu**) and runtime (e.g., **Standard**), and pick the latest 
          image version. Set the environment type to **Linux**.
    *   **Service Role:** CodeBuild requires an IAM service role to perform actions on AWS services. You can create a new service role or use an existing one. This role initially has 
          limited access.
    *   **Build Specification (`buildspec.yaml`):** This YAML file defines the build commands and settings. It can be included in the source repository or written directly in the 
           CodeBuild console editor. The demo writes it in the editor to explain step-by-step. The build spec file includes phases like `install`, `pre_build`, and `build`.
        *   `install`: Specify the runtime, e.g., `python: 3.11`.
        *   `pre_build`: Run commands before the build, like installing application requirements using `pip install -r` on the build image. Ensure the correct path to `requirements.txt` 
             relative to the build environment is provided.
        *   `build`: Run the main build commands, such as changing directory to the application code location, building the Docker image (`docker build -t <tag> .`), and pushing the 
             Docker image (`docker push <tag>`).
    *   **Secure Sensitive Information:** Use AWS Systems Manager (SSM) Parameter Store to store sensitive information like Docker credentials (username, password, registry URL). Create 
            parameters of type `SecureString` with appropriate names (e.g., following a format like `my-app/DockerCredentials/Username`). In the `buildspec.yaml`, reference these 
            parameters using the `parameter_store` section under `environment`. Define environment variables (e.g., `DOCKER_REGISTRY_USERNAME`) that map to the SSM parameter names. These 
            environment variables are then used in build commands (e.g., for `docker build` and `docker push`). You also need a `docker login` command using these variables.
    *   **Grant Permissions:** Update the CodeBuild service role to grant permissions to access AWS Systems Manager Parameter Store (e.g., `SSM full access` for demo purposes).
    *   **Enable Privileged Mode:** For building and pushing Docker images within CodeBuild, you must enable the **Privileged** option in the CodeBuild environment settings. Without 
           this, Docker commands will fail.
*   **Manual Build & Troubleshooting (Optional but demonstrated):** You can manually start a build from the CodeBuild project page (`Start build`) to test the configuration and debug 
          issues. Common issues include incorrect file paths, missing permissions, and incorrect Docker command syntax.
*   **Integrate with CodePipeline (Partial):** The CodeBuild project is configured to be invoked by CodePipeline, which acts as the orchestrator. This step is completed later when 
         creating the full pipeline.

**2. Continuous Delivery (CD) Setup (Based on Day 15)**

      The CD part focuses on deploying the built application (the Docker image from CI) onto target instances using AWS CodeDeploy.

*   **Prepare Source Code for Deployment:**
    *   In the GitHub repository, add CodeDeploy-specific files:
        *   `appspec.yaml`: This file defines deployment actions and application lifecycle event hooks for CodeDeploy. It must be placed at the **root** of the repository. The 
             `appspec.yaml` specifies the version, target OS (e.g., `linux`), and `hooks` for deployment lifecycle events (e.g., `ApplicationStop`, `AfterInstall`).
        *   Deployment Scripts: Create shell scripts to perform actions defined in `appspec.yaml`, typically placed in a `scripts` folder within the repository. Examples:
            *   `stopcontainer.sh`: Script to stop any currently running Docker container before installing the new one. A robust script identifies and stops/removes the container.
            *   `startcontainer.sh`: Script to pull the new Docker image from the registry and run it as a container, mapping the application port (e.g., 5000) to a host port (e.g., 8000 
                 or 5000).
    *   Update `appspec.yaml` to reference these scripts under the appropriate hooks. For example, call `stopcontainer.sh` under `ApplicationStop` and `startcontainer.sh` under 
        `AfterInstall`. Specify the user to run the scripts as (e.g., `root`).
*   **Prepare Target EC2 Instance:**
    *   **Create EC2 Instance:** Launch an EC2 instance (e.g., Ubuntu T2.micro) where the application will be deployed. Ensure public IP is enabled and configure network settings (VPC, 
           security groups - initially SSH is sufficient, later add HTTP/application port).
    *   **Tag EC2 Instance:** Assign a tag (Key-Value pair, e.g., `Name: sample-python`) to the EC2 instance. This tag is used by CodeDeploy to identify the target instances.
    *   **Install CodeDeploy Agent:** Connect to the EC2 instance via SSH. Install the AWS CodeDeploy agent following the steps provided in the external document mentioned in the video. This involves updating packages, installing dependencies (like Ruby, wget), downloading and executing the agent installation script specific to the AWS region, and starting the CodeDeploy agent service. Verify the agent status.
    *   **Create & Attach IAM Role for EC2:** Create an IAM role for the EC2 instance. Select EC2 as the trusted entity. Grant this role permissions necessary for the EC2 instance (specifically the CodeDeploy agent running on it) to interact with AWS services, including CodeDeploy. Attach this role to the EC2 instance. **After attaching the role, restart the CodeDeploy agent service on the EC2 instance**.
    *   **Install Docker on EC2:** The EC2 instance needs Docker installed to run the container. This step is implicitly required for the deployment scripts to work and was a point of debugging in the video. Commands like `sudo apt install docker.io -y` are used.
*   **Configure AWS CodeDeploy:**
    *   **Create Application:** Navigate to AWS CodeDeploy and create a new application. Provide a name (e.g., `sample-python-app`) and select the deployment platform (**EC2/On-premises**).
    *   **Create Deployment Group:** Within the application, create a deployment group. Provide a name (e.g., `sample-python-app`) and select a service role for CodeDeploy (either create a new one or use/update the one from CodeBuild, ensuring it has permissions to interact with EC2 instances). Specify the deployment type (e.g., In-place deployment). Identify target instances using the **Tags** created on the EC2 instance. CodeDeploy will use these tags to find instances for deployment. You can skip agent installation here if done manually.
    *   **Create Deployment (Manual for testing):** Within the deployment group, you can manually create a deployment to test the CodeDeploy configuration. Select the source provider (GitHub) and connect if not already done. Specify the repository name and the commit ID of the code you want to deploy. CodeDeploy will fetch the code, including `appspec.yaml` and scripts, from this commit.
*   **Troubleshooting CodeDeploy (Optional but demonstrated):** Manually running deployments helps debug issues like the agent not running, missing permissions for scripts, or scripts failing (e.g., Docker not installed, port conflicts).

**3. Complete CI/CD Pipeline Integration**

Combine the CI and CD stages into a single AWS CodePipeline.

*   **Create Pipeline:** Navigate to AWS CodePipeline and create a new pipeline. Provide a name (e.g., `sample-python-app`). You can create a new service role for the pipeline or use an existing one.
*   **Add Source Stage:** Configure the source stage to use **GitHub (Version 2)**. Connect to your GitHub account, specify the repository, and select the branch. CodePipeline will automatically trigger when changes are pushed to this branch.
*   **Add Build Stage:** Add a build stage and configure it to use your AWS CodeBuild project (`sample-python-project`) as the build provider.
*   **Add Deploy Stage:** Add a deploy stage after the build stage. Configure it to use **AWS CodeDeploy** as the deploy provider. Select the CodeDeploy application and deployment group created earlier. CodePipeline passes artifacts (like the `appspec.yaml` and scripts) from the source stage to the deploy stage.
*   **Save Pipeline:** Save the pipeline configuration.

**4. End-to-End Process and Documents**

Once the pipeline is created, any code change committed to the specified GitHub branch will automatically trigger the pipeline:
1.  **Source Stage:** CodePipeline detects the change in GitHub, pulls the latest code.
2.  **Build Stage:** CodePipeline invokes AWS CodeBuild. CodeBuild fetches the source code, runs the `buildspec.yaml` commands (installs requirements, builds the Docker image, logs into Docker Hub using credentials from SSM Parameter Store, pushes the Docker image).
3.  **Deploy Stage:** CodePipeline invokes AWS CodeDeploy. CodeDeploy fetches deployment instructions (`appspec.yaml`) and scripts from the source code artifact, connects to the target EC2 instances identified by tags using the CodeDeploy agent, and executes the deployment steps (stopping the old container, pulling the new Docker image, running the new container) according to the `appspec.yaml` hooks.

**Documents Mentioned in the Videos:**

*   **`app.py`**: The simple Python Flask application code.
*   **`requirements.txt`**: Lists Python dependencies required by the Flask application.
*   **`Dockerfile`**: Contains instructions for building a Docker image of the Flask application. Used by CodeBuild to create the application image.
*   **`buildspec.yaml`**: Defines the build commands and environment for AWS CodeBuild. Instructs CodeBuild on how to prepare the build environment, build the Docker image, and push it to the registry.
*   **AWS Systems Manager Parameter Store**: Used to securely store sensitive information like Docker registry username and password.
*   **`appspec.yaml`**: Specifies the application source files and defines the deployment lifecycle hooks and actions for AWS CodeDeploy. It directs CodeDeploy on *how* to deploy the application. Must be at the root of the repository.
*   **`startcontainer.sh`**: A script executed during the CodeDeploy process (e.g., `AfterInstall` hook) to pull the new Docker image and start it as a container on the target EC2 instance.
*   **`stopcontainer.sh`**: A script executed during the CodeDeploy process (e.g., `ApplicationStop` hook) to gracefully or forcefully stop any running instance of the application container on the target EC2 instance. Essential to prevent port binding errors during deployment.
*   **CodeDeploy Agent Installation Document**: An external document (link mentioned in the video) providing the specific command steps to install the CodeDeploy agent software on the target EC2 instance.

This complete process automates the flow from code changes to deployed application, enabling continuous integration and delivery.
